I wanted to find a way to help manage organizations/clubs, automate a few things here and there, admin dashboard, email notifications, etc...
I looked it ways to do that. Some options are Google Sheet with Google Apps Script, Airtable (Free Plan), CiviCRM, DIY Web app, etc... I opted for the DIY Web App option. I believe that this option can be also be a decent project, especially since I already have a domain name, a home server, and some experience working on similar project.

For the DIY Web App options I did some research on ways to implement it and I settled for the following stack:
    Backend: JavaScript, Node.js, Express
    Frontend: JavaScript, React.js, Next.js
    Email: Nodemailer
    Database: MongoDB Atlas Free Tier
    Auth: JWT (JSON Web Tokens)
    API: REST
    Repo: GitHub

I also did some research for possible sctructure and layout of the src files. I have settled for the following structure for now:
    /backend
        /config
    /frontend
    /shared
        /models
    /tests
        /unit-tests
        /e2e-tests
    /docs
        journal.txt
        command-logs.txt
    README.md
    .gitignore

I created a MongoDB Atlas free tier account and started working on the backend in order to connect it to the database. (NodeJS and npm was already installed on my machine). I initialized npm on the backend folder to manage the node packages and I intalled express, mongoose, and dotenv for now.
I added the following to the "scripts" section of `package.json`
    "start": "node server.js",
    "dev": "nodemon server.js",

I created a `.env` file and set the MongoDB connection string to a constant in order to not have it show up in the source code for security reasons.
I created a created a db.js file in the config folder of the backend folder in order to modularize the part of the code that connects to the database.
I created the server.js file to set up the backend server and testing connection to the database. Challenge [1] encountered (see challenges-faced.txt file).
I updated package.json file to contain mopre information about the project and updated "main: index.js" to "main: server.js"
I created a User model and included the following fields:
    first name, middle name, last name, email, phone number, date of birth, status (active, inactive, etc..), positions, groups (admin, PR, marketing, etc), join date, mentor, mentees, last login date, balance (fines/dues decrease the balance, payment increase the balance), total donation, authentification { password hash, email verified, email verification code, email verification code expiration, account lock}, settings {email notifications{ isEnabled, fines, payment}}, metadata {notes, studentID, good deeds, accomplishment, social media, interests, skils, etc}
i created some indexes for database lookup perfromance (email, group, position, balance). I added some virtual fields (not saved in databse but calculated based on otehr data) for getting full name, checking if account is locked, and to chack if balance is dept or credit.

I restructured the repo by moving the models folder from shared to backend because I believe the models will be only used by the backend server.
I also did some more research and added folders for middleware, routes, controllers in the backend folder and added utils in the shared folder.

I created simple CRUD opperation APIs for users. I created a user controller file that is responsible for getting the data and send it. I created an user route file that is reponsible for routing the request to the correct user controller function. And I added the origin api route "api/user" in the server.js file.
I ran into an issue where mongoose was saying that there was a duplicate schema index on 'email'. I found out it was because in the model, I had set unique to true when defining email - whcih automatically create an index for it; but then later I specifically created an index for email. so there was 2 indexes defined for email which raises the error. I fixed it by removing the first one "unique: true" and left the later "UserSchema.index({ email: 1 }, { unique: true });" including the second "unique: true"

This is the updated structure of the repo

    /backend
        /config
            db.js
        /controllers
            userController.js
        /middleware
        /models
            User.js
        /routes
            userRoutes.js
        .env
        package-lock.json
        package.jason
        server.js
    /frontend
    /shared
        /utils
    /tests
        /unit-tests
        /e2e-tests
    /docs
        journal.txt
        command-logs.txt
        challenges-faced.txt
    README.md
    .gitignore

    I added a middleware validator to validate user creation and update. The purpose was to validate the data before making database call or before it reaches mongoose.
    